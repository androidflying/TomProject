package com.hub.welfare.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hub.welfare.model.CategoryEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CATEGORY_ENTITY".
 */
public class CategoryEntityDao extends AbstractDao<CategoryEntity, Void> {

    public static final String TABLENAME = "CATEGORY_ENTITY";

    /**
     * Properties of entity CategoryEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Value = new Property(0, String.class, "value", false, "VALUE");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property IsChecked = new Property(3, boolean.class, "isChecked", false, "IS_CHECKED");
    }


    public CategoryEntityDao(DaoConfig config) {
        super(config);
    }

    public CategoryEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORY_ENTITY\" (" + //
                "\"VALUE\" TEXT," + // 0: value
                "\"NAME\" TEXT," + // 1: name
                "\"TYPE\" TEXT," + // 2: type
                "\"IS_CHECKED\" INTEGER NOT NULL );"); // 3: isChecked
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORY_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CategoryEntity entity) {
        stmt.clearBindings();

        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(1, value);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
        stmt.bindLong(4, entity.getIsChecked() ? 1L : 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CategoryEntity entity) {
        stmt.clearBindings();

        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(1, value);
        }

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }

        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
        stmt.bindLong(4, entity.getIsChecked() ? 1L : 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    @Override
    public CategoryEntity readEntity(Cursor cursor, int offset) {
        CategoryEntity entity = new CategoryEntity( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // value
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
                cursor.getShort(offset + 3) != 0 // isChecked
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, CategoryEntity entity, int offset) {
        entity.setValue(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsChecked(cursor.getShort(offset + 3) != 0);
    }

    @Override
    protected final Void updateKeyAfterInsert(CategoryEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    @Override
    public Void getKey(CategoryEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(CategoryEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
